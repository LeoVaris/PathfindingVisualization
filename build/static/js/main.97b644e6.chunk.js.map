{"version":3,"sources":["pathfinding/Node.js","algorithms/generalAlgorithms.js","algorithms/dijkstra.js","algorithms/Astar.js","algorithms/GBF.js","pathfinding/PathfindingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","row","isStart","isFinish","isWall","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","className","Component","neighbors","grid","node","rows","cols","nb","push","filter","isVisited","distanceToNode","target_node","Math","abs","GridToNodeArray","nodes","sortNodesByDistance","sort","A","B","distance","animate","visitedNodesInOrder","nodesInShortestPathOrder","end_node","length","i","setTimeout","j","document","getElementById","animateShortestPath","finalPath","currentNode","unshift","previousNode","updateNeighbors","neighbor","start_node","start_row","start_col","end_row","end_col","ActionState","PlaceWall","RemoveWall","Start","End","PathfindingVisualizer","state","loading","mouseDown","CurrentAction","Makegrid","setState","newGrid","getNewGridWithAction","mouseIsPressed","button","window","location","reload","visitedNodes","unVisitedNodes","closestNode","shift","Infinity","dijkstra","astar","GBF","newState","onClick","ClearGrid","extraState","SetActionState","ResetGrid","VisualizeDijkstra","VisualizeAstar","VisualizeGBF","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","thisRow","createNode","action","getNewGridWithWallToggled","getNewGridWithNewStart","getNewGridWithNewEnd","slice","oldStart","newStart","RemovedStart","oldEnd","newEnd","RemovedEnd","placeWall","newNode","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97b644e6.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n\r\n  render() {\r\n\r\n    const {\r\n      col, \r\n      row,\r\n      isStart,\r\n      isFinish,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n    } = this.props; // extract data to constants\r\n    // extra classname if start, end or wall\r\n    let extraClassName = '';\r\n\r\n    if (isStart) extraClassName = 'Node-start';\r\n    else if (isFinish) extraClassName = 'Node-finish';\r\n    else if (isWall) extraClassName = 'Node-wall';\r\n\r\n    return (\r\n      <div id={`node-${row}-${col}`}\r\n           className={`Node ${extraClassName}`}\r\n           onMouseDown={() => onMouseDown(row, col)}\r\n           onMouseEnter={() => onMouseEnter(row, col)}\r\n           onMouseUp={() => onMouseUp()}\r\n      ></div> \r\n    )\r\n  }\r\n}","// General functions for pathfinding algorithms\r\n\r\n// get unvisited neighbors\r\nexport function neighbors(grid, node, rows, cols) {\r\n  const col = node.col;\r\n  const row = node.row;\r\n  const nb = [];\r\n  if (row > 0) nb.push(grid[row - 1][col]);\r\n  if (col > 0) nb.push(grid[row][col - 1]);\r\n  if (row + 1 < rows) nb.push(grid[row + 1][col]);\r\n  if (col + 1 < cols) nb.push(grid[row][col + 1]);\r\n  return nb.filter(node => !node.isVisited);\r\n};\r\n\r\n// get distance to certain node\r\nexport function distanceToNode(target_node, node) {\r\n  return Math.abs(target_node.row - node.row) + Math.abs(target_node.col - node.col)\r\n};\r\n\r\n// transform grid to array\r\nexport function GridToNodeArray(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// sort nodes\r\nexport function sortNodesByDistance(nodes) {\r\n  nodes.sort((A, B) => A.distance - B.distance);\r\n}\r\n\r\n// Animates the path\r\nexport function animate(visitedNodesInOrder, nodesInShortestPathOrder, end_node) {\r\n  // If theres no path \r\n  if (visitedNodesInOrder[visitedNodesInOrder.length-1].row !== end_node.row\r\n     || visitedNodesInOrder[visitedNodesInOrder.length-1].col !== end_node.col) {\r\n    for (let i = 1; i <= visitedNodesInOrder.length; ++i) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          for (let j = 1; j < visitedNodesInOrder.length; ++j) {\r\n            const node = visitedNodesInOrder[j];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                'Node Node-nopath';\r\n          }\r\n        }, 10 * i + 200);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'Node Node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  // when path found the end\r\n  for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n    if (i === visitedNodesInOrder.length) { // if i = 1-index over it animates the path\r\n      setTimeout(() => {\r\n        animateShortestPath(nodesInShortestPathOrder);\r\n      }, 10 * i + 500); // sets the time to last node + 500ms\r\n      return;\r\n    }\r\n    if (i === visitedNodesInOrder.length - 1) continue;\r\n    setTimeout(() => {\r\n      const node = visitedNodesInOrder[i];\r\n      // used getElementById because of too many states updates lagging\r\n      document.getElementById(`node-${node.row}-${node.col}`).className = \r\n        'Node Node-visited';\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\n// gets the final path by tracking backwards from endnode\r\nexport function finalPath(end_node) {\r\n  const nodes = [];\r\n  let currentNode = end_node;\r\n  while (currentNode !== null) {\r\n    nodes.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// animates the shortest path\r\nfunction animateShortestPath(nodesInShortestPathOrder) {\r\n  for (let i = 1; i < nodesInShortestPathOrder.length-1; i++) {\r\n    setTimeout(() => {\r\n      const node = nodesInShortestPathOrder[i];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'Node Node-shortest-path';\r\n    }, 50 * i);\r\n  }\r\n}\r\n","import {neighbors, GridToNodeArray, sortNodesByDistance} \r\nfrom './generalAlgorithms';\r\n\r\n\r\nexport function dijkstra(grid, start_node, end_node) {\r\n  const visitedNodes = [];\r\n  start_node.distance = 0; // start with 0 dist\r\n  const unVisitedNodes = GridToNodeArray(grid); // all are unvisited\r\n  while (unVisitedNodes.length) { // while theres nodes to visit\r\n    sortNodesByDistance(unVisitedNodes); // sort nodes\r\n    const closestNode = unVisitedNodes.shift(); // removes the first item\r\n\r\n    if (closestNode.isWall) continue; // if its wall ignore it\r\n\r\n    if (closestNode.distance === Infinity) return visitedNodes; // theres no path\r\n    closestNode.isVisited = true; // \"visit\" this node\r\n    visitedNodes.push(closestNode); \r\n    if (closestNode.row === end_node.row && closestNode.col === end_node.col)  // if this is end\r\n      return visitedNodes;\r\n    updateNeighbors(closestNode, grid); // update this nodes neighbors\r\n  }\r\n}\r\n\r\nfunction updateNeighbors(node, grid) {\r\n  const nb = neighbors(grid, node, grid.length, grid[0].length);\r\n  for (const neighbor of nb) {\r\n    neighbor.distance = node.distance + 1; // distance is 1 more than where it came from\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n","import {neighbors, GridToNodeArray, sortNodesByDistance, distanceToNode} \r\nfrom './generalAlgorithms';\r\n\r\n\r\nexport function astar(grid, start_node, end_node) {\r\n  const visitedNodes = [];\r\n  start_node.distance = 0;\r\n  const unVisitedNodes = GridToNodeArray(grid);\r\n  while (unVisitedNodes.length) {\r\n    sortNodesByDistance(unVisitedNodes);\r\n    const closestNode = unVisitedNodes.shift();\r\n\r\n    if (closestNode.isWall) continue;\r\n\r\n    if (closestNode.distance === Infinity) return visitedNodes;\r\n    closestNode.isVisited = true;\r\n    visitedNodes.push(closestNode);\r\n    if (closestNode.row === end_node.row && closestNode.col === end_node.col) \r\n      return visitedNodes;\r\n    updateNeighbors(closestNode, grid, start_node, end_node);\r\n  }\r\n}\r\n\r\nfunction updateNeighbors(node, grid, start_node, end_node) {\r\n  const nb = neighbors(grid, node, grid.length, grid[0].length);\r\n  for (const neighbor of nb) {\r\n    // Difference is that it also accounts the endnode\r\n    neighbor.distance = distanceToNode(end_node, neighbor) + distanceToNode(start_node, neighbor); \r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n","import {neighbors, GridToNodeArray, sortNodesByDistance, distanceToNode} \r\nfrom './generalAlgorithms';\r\n\r\n\r\nexport function GBF(grid, start_node, end_node) {\r\n  const visitedNodes = [];\r\n  start_node.distance = 0;\r\n  const unVisitedNodes = GridToNodeArray(grid);\r\n  while (unVisitedNodes.length) {\r\n    sortNodesByDistance(unVisitedNodes);\r\n    const closestNode = unVisitedNodes.shift();\r\n\r\n    if (closestNode.isWall) continue;\r\n\r\n    if (closestNode.distance === Infinity) return visitedNodes;\r\n    closestNode.isVisited = true;\r\n    visitedNodes.push(closestNode);\r\n    if (closestNode.row === end_node.row && closestNode.col === end_node.col) \r\n      return visitedNodes;\r\n    updateNeighbors(closestNode, grid, start_node, end_node);\r\n  }\r\n}\r\n\r\nfunction updateNeighbors(node, grid, start_node, end_node) {\r\n  const nb = neighbors(grid, node, grid.length, grid[0].length);\r\n  for (const neighbor of nb) {\r\n    neighbor.distance = distanceToNode(end_node, neighbor); // Difference is that it only cares about the endnode\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport Node from './Node';\r\nimport {dijkstra} from '../algorithms/dijkstra';\r\nimport {astar} from '../algorithms/Astar';\r\nimport {GBF} from '../algorithms/GBF';\r\nimport {animate, finalPath} from '../algorithms/generalAlgorithms';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst GridHeight = 25;\r\nconst GridWidth = 50;\r\n\r\nlet start_row = 12\r\nlet start_col = 10\r\n\r\nlet end_row = 12\r\nlet end_col = 40\r\n\r\nvar ActionState = {\r\n  PlaceWall: 1,\r\n  RemoveWall: 2,\r\n  Start: 3,\r\n  End: 4,\r\n}\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      loading: true,\r\n      mouseDown: false,\r\n      CurrentAction: ActionState.PlaceWall,\r\n    };\r\n  }\r\n\r\n  // Makes grid after components loaded\r\n  componentDidMount() {\r\n    const grid = Makegrid();\r\n    this.setState({grid, loading: false});\r\n  }\r\n  // when mouse is pressed down\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithAction(this.state.grid, row, col, this.state.CurrentAction);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n  // when mouse enters\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return; // if currently not placing walls\r\n    const newGrid = getNewGridWithAction(this.state.grid, row, col, this.state.CurrentAction);\r\n    this.setState({grid: newGrid});\r\n  }\r\n  // when mouse up\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false}); // updates mouse state\r\n  }\r\n  // To make certain action \"active\"\r\n  extraState(button) {\r\n    const {CurrentAction} = this.state;\r\n    if (CurrentAction === button) {\r\n      return 'IO-current';\r\n    } else return ''; \r\n  }\r\n  // Clears walls by making a new grid\r\n  ClearGrid() {\r\n    const grid = Makegrid();\r\n    this.setState({grid});\r\n  }\r\n  // Refreshing the page -> everything is reset\r\n  ResetGrid() {\r\n    window.location.reload();\r\n  }\r\n\r\n\r\n  // These algorithms could have been made to 1 function to save space\r\n  // Dijkstra\r\n  VisualizeDijkstra() {\r\n    const {grid} = this.state;\r\n    const start_node = grid[start_row][start_col];\r\n    const end_node = grid[end_row][end_col];\r\n    const nodes = dijkstra(grid, start_node, end_node); // computes visited nodes\r\n    const pathNodes = finalPath(nodes[nodes.length-1]); // gets shortest path \r\n    animate(nodes, pathNodes, end_node); // animates path\r\n  }\r\n  // Astar\r\n  VisualizeAstar() {\r\n    const {grid} = this.state;\r\n    const start_node = grid[start_row][start_col];\r\n    const end_node = grid[end_row][end_col];\r\n    const nodes = astar(grid, start_node, end_node);\r\n    const pathNodes = finalPath(nodes[nodes.length-1]);\r\n    animate(nodes, pathNodes, end_node);\r\n  }\r\n  // Greedy Best-first Search\r\n  VisualizeGBF() {\r\n    const {grid} = this.state;\r\n    const start_node = grid[start_row][start_col];\r\n    const end_node = grid[end_row][end_col];\r\n    const nodes = GBF(grid, start_node, end_node);\r\n    const pathNodes = finalPath(nodes[nodes.length-1]);\r\n    animate(nodes, pathNodes, end_node);\r\n  }\r\n  // Updates ActionState\r\n  SetActionState(newState) {\r\n    this.setState({CurrentAction: newState});\r\n  }\r\n  // render\r\n  render() {\r\n    const {grid, loading, mouseDown} = this.state; // extract variables\r\n\r\n    if (loading) { // if page not loaded\r\n      return 'Loading...';\r\n    }\r\n    return (\r\n    <>\r\n      <div className=\"buttons\"> { /* Create all IO*/}\r\n        <div className=\"IO\"> {/*Create top row */}\r\n          <button className=\"general\" onClick={() => this.ClearGrid()}>\r\n            Clear Walls\r\n          </button>\r\n          <button className={`general ${this.extraState(ActionState.PlaceWall)}`} onClick={() => this.SetActionState(ActionState.PlaceWall)}>\r\n            Place wall\r\n          </button>\r\n          <button className={`general ${this.extraState(ActionState.RemoveWall)}`} onClick={() => this.SetActionState(ActionState.RemoveWall)}>\r\n            Remove wall\r\n          </button>\r\n          <button className={`general ${this.extraState(ActionState.Start)}`} onClick={() => this.SetActionState(ActionState.Start)}>\r\n            Place startnode\r\n          </button>\r\n          <button className={`general ${this.extraState(ActionState.End)}`} onClick={() => this.SetActionState(ActionState.End)}>\r\n            Place endnode\r\n          </button>\r\n          <button className=\"general\" onClick={() => this.ResetGrid()}>\r\n            Reset Grid\r\n          </button>\r\n        </div>\r\n        <div className=\"info\"> {/*Create info message */}\r\n          Press below to visualize!\r\n        </div>\r\n        <div className=\"VisualizeClass\"> {/*Visualize buttons */}\r\n          <button className=\"general Visualize\" onClick={() => this.VisualizeDijkstra()}>\r\n            Dijkstra's\r\n          </button>\r\n          <button className=\"general Visualize\" onClick={() => this.VisualizeAstar()}>\r\n            AStar\r\n          </button>\r\n          <button className=\"general Visualize\" onClick={() => this.VisualizeGBF()}>\r\n            Greedy Best-first Search\r\n          </button>\r\n        </div>\r\n        <div className=\"warning\"> {/* Last row to tell user to reset browser after visualization*/}\r\n          Please reset grid after visualization\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"grid\"> {/* Render the grid*/}\r\n        {grid.map((row, rowIdx) => { \r\n          return (\r\n            <div key={rowIdx}>\r\n              {row.map((node, nodeIdx) => {  \r\n                const {row, col, isStart, isFinish, isWall, isVisited} = node; \r\n                return( // return Node component with these props\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    col={col}\r\n                    row={row}\r\n                    isStart={isStart}\r\n                    isFinish={isFinish}\r\n                    isWall={isWall}\r\n                    isVisited={isVisited}\r\n                    mouseDown={mouseDown}\r\n                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) =>\r\n                      this.handleMouseEnter(row, col)\r\n                    }\r\n                    onMouseUp={() => this.handleMouseUp()}\r\n                  ></Node>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n    );\r\n  }\r\n}\r\n// Create grid\r\nconst Makegrid = () => {\r\n  const grid = [];\r\n\r\n  for (let row = 0; row < GridHeight; row++) {\r\n    const thisRow = [];\r\n    for (let col = 0; col < GridWidth; col++) {\r\n      thisRow.push(createNode(row, col));\r\n    }\r\n    grid.push(thisRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\n// creates every node to have necessary data\r\nconst createNode = (row, col) => {\r\n  return {\r\n    row,\r\n    col, \r\n    isStart: row === start_row && col === start_col,\r\n    isFinish: row === end_row && col === end_col,\r\n    isWall: false,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    previousNode: null,\r\n    };\r\n};\r\n\r\n// handles Actions\r\nconst getNewGridWithAction = (grid, row, col, action) => {\r\n  if (action === ActionState.PlaceWall) {\r\n    return getNewGridWithWallToggled(grid, row, col, true);\r\n  } else if (action === ActionState.RemoveWall) {\r\n    return getNewGridWithWallToggled(grid, row, col, false);\r\n  } else if (action === ActionState.Start) {\r\n    return getNewGridWithNewStart(grid, row, col);\r\n  } else {\r\n    return getNewGridWithNewEnd(grid, row, col);\r\n  }\r\n};\r\n// place new start \r\nconst getNewGridWithNewStart = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const oldStart = newGrid[start_row][start_col];\r\n  const node = newGrid[row][col];\r\n  const newStart = {\r\n    ...node,\r\n    isWall: false,\r\n    isStart: true,\r\n  };\r\n  const RemovedStart = {\r\n    ...oldStart,\r\n    isStart: false,\r\n  }\r\n  // remove start first to avoid adding and removing the same node\r\n  newGrid[start_row][start_col] = RemovedStart; \r\n  newGrid[row][col] = newStart;\r\n  start_col = col;\r\n  start_row = row;\r\n  return newGrid;\r\n}\r\n// place new end\r\nconst getNewGridWithNewEnd = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const oldEnd = newGrid[end_row][end_col];\r\n  const node = newGrid[row][col];\r\n  const newEnd = {\r\n    ...node,\r\n    isWall: false,\r\n    isFinish: true,\r\n  };\r\n  const RemovedEnd = {\r\n    ...oldEnd,\r\n    isFinish: false,\r\n  }\r\n  newGrid[end_row][end_col] = RemovedEnd;\r\n  newGrid[row][col] = newEnd;\r\n  end_col = col;\r\n  end_row = row;\r\n  return newGrid;\r\n}\r\n\r\n// toggle wall with placewall boolean\r\nconst getNewGridWithWallToggled = (grid, row, col, placeWall) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: placeWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React from 'react';\r\n//import './App.css';\r\nimport PathfindingVisualizer from './pathfinding/PathfindingVisualizer.js';\r\n\r\n\r\nfunction App() {  \r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer></PathfindingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}